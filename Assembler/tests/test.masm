.data:
msg: .string "Hello World!" ;; this is a string, unlike Nasm, using the ",10" at last is not valid
                            ;; every character must be inside the quotes
                            ;; Single quotes and double quotes don't really matter
                            ;; Since the assembler reads until it finds the pairing quote, this 
                            ;; allows for multi-line strings
msg2: .string "This is another". ;; the use of '.' without space right after the ending quote 
              " message"         ;; allows for something like this
                                 ;; The assembler will just automatically concatenate the two strings 

;; Not all mov instructions will work for strings
;; only those with the 'b' suffix will work
;; But not the movsx one, they won't work

strlen: db 13
strlen_w: dw 60000
strlen_d: dd 1000000
strlen_q: dq 100000000

.text:
proc main
proc what

what:
  hlt
  hlt
  hlt

;; The mov instruction has generally two types.
;; For eg: mov8 instruction moves the byte without affecting the other bytes in the register
;; But the mov_reg8 instruction moves the byte but the upper bytes are cleared.

main:
  nop
  mov Ma, 1 ;; just plain mov reg, imm
  mov Mb, Ma ;; mov reg, reg
  mov Mc, strlen ;; translates to loadb Mb, strlen
  mov Md, strlen_w ;; translates to loadw Mc, strlen_w
  mov Me, strlen_d ;; translates to loadd Mb, strlen_d
  mov Mf, strlen_q ;; translates to loadq Me, strlen_q
  movq M1, 123456789 ;; just movq reg, imm
  movq M2, M3 ;; translates to mov reg, reg
  movq M4, strlen_q ;; translates to loadq Mf, strlen_q
  ;; movq Mf, strlen ;; error, accepts only qwords; same for strlen_d and strlen_w
  movb M5, 1 
  movb Mm1, Mm2
  movb Mm3, strlen 
  movw Mm4, 2
  movw Mm5, Mm4
  movw M3, strlen_w
  movd M5, 3
  movd M5, Ma
  movd M5, strlen_d

  ;; the following three moves are restricted to register operands only
  ;; The above move instructions affect the upper bytes of the destination register
  ;; zeroing it out but the below will not do that
  ;; There is no moveq and using variables and immediates is not allowed
  moveb Ma, Mb
  movew M1, M2
  moved Mm1 Mm2

  ;; NOTE: The assembler doesn't strictly require the use of commas
  ;; in fact, the assembler ignores all the commas
  ;; They are just their to increase readability
  ;; So the following line is completely valid as well

  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, ;; ignored by assembler

  movsxb Ma, 1
  movsxb Ma, M1
  movsxb Ma, strlen
  movsxw Mb, 2
  movsxw Mb, M2
  movsxw Mb, strlen_w
  movsxd Mc, 3
  movsxd Mc, M3
  movsxd Mc, strlen_d
  outr ;; print the contents of all the registers
  uoutr ;; print all as unsigned
  mov Ma, msg ;; should be loadb
  cin Ma ;; read a character into Ma
  cout Ma ;; write a character of Ma
  mov Mc, 4
  sin resb1 ;; read 4 characters and store them in resb1 variable
  sout resb1

  ;; Now for floating points
  ;; The assembler now suppots negative numbers too
  ;; negative numbers in variables, in instructions as well
  ;; Now it is the turn for floating point numbers
  ;; Any register could be used for floating point arithmetic
  ;; however, Mm1 through Mm5 are more recommended

  movf Mm1, 22.3 ;; 32-bit floating point number
  movlf Mm2, 1234.56 ;; 64-bit floating point number
  movf Mm3, float1

  outf Mm1 ;; print 32-bit floating point number
  outlf Mm2 ;; print 64-bit floating point number
  inf Mm4 ;; take a 32-bit floating point number as input 
  inlf Mm5 ;; take a 64-bit floating point number as input

  add Ma, Mb  ;; add two registers together
  add Mc, test ;; add a variable to a register
  add Md, 1234

  sub Ma, Mb  
  sub Mc, test
  sub Md, 1234

  mul Ma, Mb  
  mul Mc, test
  mul Md, 1234

  div Ma, Mb  
  div Mc, test
  div Md, 1234

  mod Ma, Mb  
  mod Mc, test
  mod Md, 1234

  iadd Ma, Mb  
  iadd Mc, test
  iadd Md, 1234

  isub Ma, Mb  
  isub Mc, test
  isub Md, 1234

  imul Ma, Mb  
  imul Mc, test
  imul Md, 1234

  idiv Ma, Mb  
  idiv Mc, test
  idiv Md, 1234

  imod Ma, Mb  
  imod Mc, test
  imod Md, 1234

  ;; fadd and lfadd should only take registers as operands
  ;; but to make things easier for the programmer, the assembler will
  ;; generate extra code for performing the operation
  ;; except for immediates
  ;; The programmer must use movf first to move the desired floating point immdiate to a register
  
  ;; fadd Ma, -11.3
  fadd Mb, float1
  fadd Ma, Ma

  ;; 64-bit floating point arithmetic instructions
  ;; lfadd Ma, -11.3
  lfadd Mb, float2
  lfadd Ma, Ma

  ;; fsub Ma, -11.3
  fsub Mb, float1
  fsub Ma, Ma

  ;; lfsub Ma, -11.3
  lfsub Mb, float2
  lfsub Ma, Ma

  ;; fmul Ma, -11.3
  fmul Mb, float1
  fmul Ma, Ma

hello: ;; just a label
  ;; lfmul Ma, -11.3
  lfmul Mb, float2
  lfmul Ma, Ma

  ;; fdiv Ma, -11.3
  fdiv Mb, float1
  fdiv Ma, Ma

  ;; lfdiv Ma, -11.3
  lfdiv Mb, float2
  lfdiv Ma, Ma

  ;; floating point numbers don't have mod instruction
  jmp hello ;; infinite loop
  hlt ;; we use halt here because this is what ultimately stops the program so there is no point in having a ret here
;; main:
  
  cmp Ma, 12;; implement this
  cmp Ma, Mb ;; and this next

.data:
test: db 123

;; Unlike Nasm and other assemblers, masm will not have separate bss section
;; instead we will make use of the data section
resb1: .resb 4 ;; reserve 4 bytes
resb2: .resw 4 ;; reserve 4 words
resb3: .resd 4 ;; reserve 4 dwords
resb4: .resq 4 ;; reserve 4 qwords

;; for floating point values
float1: df 12345.54321
float2: dlf 112233.332211