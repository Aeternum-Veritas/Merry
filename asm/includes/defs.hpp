#ifndef _DEFS_
#define _DEFS_

namespace masm
{
    enum DataType
    {
        BYTE,
        WORD,
        DWORD,
        QWORD,
        FLOAT,
        LFLOAT,
        STRING,
        RESB,
        RESW,
        RESD,
        RESQ,
    };

    enum NodeKind
    {
        PROC_DECLR,
        LABEL,
        NOP,
        HLT,
        
        ADD_IMM,
        ADD_REG,
        ADD_MEM,
        ADD_EXPR,
        SUB_IMM,
        SUB_REG,
        SUB_MEM,
        SUB_EXPR,
        MUL_IMM,
        MUL_REG,
        MUL_MEM,
        MUL_EXPR,
        DIV_IMM,
        DIV_REG,
        DIV_MEM,
        DIV_EXPR,
        MOD_IMM,
        MOD_REG,
        MOD_MEM,
        MOD_EXPR,

        IADD_IMM,
        IADD_REG,
        IADD_VAR,
        IADD_EXPR,
        ISUB_IMM,
        ISUB_REG,
        ISUB_VAR,
        ISUB_EXPR,
        IMUL_IMM,
        IMUL_REG,
        IMUL_VAR,
        IMUL_EXPR,
        IDIV_IMM,
        IDIV_REG,
        IDIV_VAR,
        IDIV_EXPR,
        IMOD_IMM,
        IMOD_REG,
        IMOD_VAR,
        IMOD_EXPR,

        FADD,
        FSUB,
        FMUL,
        FDIV,
        LFADD,
        LFSUB,
        LFMUL,
        LFDIV,
        FADD_MEM,
        FSUB_MEM,
        FMUL_MEM,
        FDIV_MEM,
        LFADD_MEM,
        LFSUB_MEM,
        LFMUL_MEM,
        LFDIV_MEM,

        MOV_IMM,
        MOV_REG,
        MOV_VAR,
        MOV_EXPR,

        MOVL_IMM,
        MOVL_REG,
        MOVL_VAR,
        MOVL_EXPR,

        MOVB,
        MOVW,
        MOVD,

        MOVSXB_IMM,
        MOVSXB_REG,
        MOVSXB_VAR,
        MOVSXB_EXPR,

        MOVSXW_IMM,
        MOVSXW_REG,
        MOVSXW_VAR,
        MOVSXW_EXPR,

        MOVSXD_IMM,
        MOVSXD_REG,
        MOVSXD_VAR,
        MOVSXD_EXPR,

        JMP,
        CALL,
        CALL_REG,
        RET,

        SVA_IMM,
        SVA_REG,
        SVA_VAR,
        SVA_EXPR,

        SVC_IMM,
        SVC_REG,
        SVC_VAR,
        SVC_EXPR,

        PUSHA,
        POPA,

        PUSH_IMM,
        PUSH_REG,
        PUSH_VAR,
        PUSH_EXPR,

        POP_IMM, // useless KIND just for there for some reason
        POP_REG,
        POP_VAR,

        NOT,
        INC,
        DEC,

        AND_IMM,
        AND_REG,
        AND_VAR,
        AND_EXPR,
        OR_IMM,
        OR_REG,
        OR_VAR,
        OR_EXPR,
        XOR_IMM,
        XOR_REG,
        XOR_VAR,
        XOR_EXPR,
        LSHIFT,
        LSHIFT_REG, // pseudo node type
        LSHIFT_VAR,
        LSHIFT_EXPR,
        RSHIFT,
        RSHIFT_REG, // pseudo node type
        RSHIFT_VAR,
        RSHIFT_EXPR,

        CMP_IMM,
        CMP_REG,
        CMP_VAR,
        CMP_EXPR,

        LEA,

        LOADB_REG,
        LOADB_VAR,
        ALOADB_REG,
        ALOADB_VAR,

        LOADW_REG,
        LOADW_VAR,
        ALOADW_REG,
        ALOADW_VAR,

        LOADD_REG,
        LOADD_VAR,
        ALOADD_REG,
        ALOADD_VAR,

        LOADQ_REG,
        LOADQ_VAR,
        ALOADQ_REG,
        ALOADQ_VAR,

        STOREB_REG,
        STOREB_VAR,
        ASTOREB_REG,
        ASTOREB_VAR,

        STOREW_REG,
        STOREW_VAR,
        ASTOREW_REG,
        ASTOREW_VAR,

        STORED_REG,
        STORED_VAR,
        ASTORED_REG,
        ASTORED_VAR,

        STOREQ_REG,
        STOREQ_VAR,
        ASTOREQ_REG,
        ASTOREQ_VAR,

        CMPXCHG,
        CMPXCHG_REGR,

        OUTR,
        UOUTR,

        CIN,
        COUT,
        SIN,
        SIN_REGR,
        SOUT,
        SOUT_REGR,
        IN,
        INW,
        IND,
        INQ,
        UIN,
        UINW,
        UIND,
        UINQ,
        OUT,
        OUTW,
        OUTD,
        OUTQ,
        UOUT,
        UOUTW,
        UOUTD,
        UOUTQ,

        INF,
        INLF,
        OUTF,
        OUTLF,

        EXCGB,
        EXCGW,
        EXCGD,
        EXCGQ,

        MOVEB,
        MOVEW,
        MOVED,

        CFLAGS,
        NRESET,
        CLZ,
        CLN,
        CLC,
        CLO,

        JNZ,
        JZ,
        JNE,
        JE,
        JNC,
        JC,
        JNO,
        JO,
        JNN,
        JN,
        JNG,
        JG,
        JNS,
        JS,
        JGE,
        JSE,

        LOOP,
        INTR,
        INTR_EXPR,
        INTR_VAR,

        SETE,
        CALLE,
        SYSCALL,

    };

    enum Register
    {
        Ma,
        Mb,
        Mc,
        Md,
        Me,
        Mf,
        M1,
        M2,
        M3,
        M4,
        M5,
        Mm1,
        Mm2,
        Mm3,
        Mm4,
        Mm5,
    };

    enum TokenType
    {
        MB_C, // pseudotoken
        IDENTIFIER,
        NUM_INT,
        NUM_FLOAT,
        EXPR,
        STR,
        KEY_DB,
        KEY_DW,
        KEY_DD,
        KEY_DQ,
        KEY_DS,
        KEY_DF,
        KEY_DC,
        KEY_DLF,
        KEY_RB,
        KEY_RW,
        KEY_RD,
        KEY_RQ,
        OPER_DOT, // a pseudotoken
        KEY_PROC,
        KEY_Ma,
        KEY_Mb,
        KEY_Mc,
        KEY_Md,
        KEY_Me,
        KEY_Mf,
        KEY_M1,
        KEY_M2,
        KEY_M3,
        KEY_M4,
        KEY_M5,
        KEY_Mm1,
        KEY_Mm2,
        KEY_Mm3,
        KEY_Mm4,
        KEY_Mm5,
        INST_NOP,
        INST_HLT,
        INST_ADD,
        INST_SUB,
        INST_MUL,
        INST_DIV,
        INST_MOD,
        INST_IADD,
        INST_ISUB,
        INST_IMUL,
        INST_IDIV,
        INST_IMOD,
        INST_ADDF,
        INST_SUBF,
        INST_MULF,
        INST_DIVF,
        INST_ADDLF,
        INST_SUBLF,
        INST_MULLF,
        INST_DIVLF,
        INST_MOV,
        INST_MOVL,
        INST_MOVB,
        INST_MOVW,
        INST_MOVD,
        INST_MOVESXB,
        INST_MOVESXW,
        INST_MOVESXD, // there is no need for 64-bit which should be obvious
        INST_JMP,
        INST_CALL,
        INST_RET,
        INST_SVA,
        INST_SVC,
        INST_PUSHA,
        INST_POPA,
        INST_PUSH,
        INST_POP,
        INST_NOT,
        INST_INC,
        INST_DEC,
        INST_AND,
        INST_OR,
        INST_XOR,
        INST_LSHIFT,
        INST_RSHIFT,
        INST_CMP,
        INST_LEA,
        INST_LOADB,
        INST_STOREB,
        INST_LOADW,
        INST_STOREW,
        INST_LOADD,
        INST_STORED,
        INST_LOADQ,
        INST_STOREQ,
        INST_CMPXCHG,
        INST_OUTR,
        INST_UOUTR,
        INST_CIN,
        INST_COUT,
        INST_SIN,
        INST_SOUT,
        INST_IN,
        INST_INW,
        INST_IND,
        INST_INQ,
        INST_UIN,
        INST_UINW,
        INST_UIND,
        INST_UINQ,
        INST_OUT,
        INST_OUTW,
        INST_OUTD,
        INST_OUTQ,
        INST_UOUT,
        INST_UOUTW,
        INST_UOUTD,
        INST_UOUTQ,
        INST_INF,
        INST_OUTF,
        INST_INLF,
        INST_OUTLF,
        INST_EXCHGB,
        INST_EXCHGW,
        INST_EXCHGD,
        INST_EXCHGQ,
        INST_MOVEB,
        INST_MOVEW,
        INST_MOVED,
        INST_CFLAGS,
        INST_RESET,
        INST_CLZ,
        INST_CLN,
        INST_CLC,
        INST_CLO,
        INST_JNZ,
        INST_JZ,
        INST_JNE,
        INST_JE,
        INST_JNC,
        INST_JC,
        INST_JNO,
        INST_JO,
        INST_JNN,
        INST_JN,
        INST_JNG,
        INST_JG,
        INST_JNS,
        INST_JS,
        INST_JGE,
        INST_JSE,
        INST_LOOP,
        INST_INTR,
        INST_SETE,
        INST_SYSCALL,
        INST_CALLE,
        KEY_ATM,
        KEY_DEPENDS,
        KEY_DEFINED,
        KEY_END,
        KEY_ENTRY,
        KEY_EEPE,
        KEY_TEEPE,
        KEY_NDEFINED,
        OPER_PLUS,
        OPER_MINUS,
        OPER_MUL,
        OPER_DIV,
        OPER_OPEN_PAREN,
        OPER_CLOSE_PAREN,
        OPER_AND,  // &&
        OPER_OR,   // ||
        OPER_XOR,  // ^
        OPER_NOT,  // !
        OPER_LS,   // >>
        OPER_RS,   // <<
        OPER_LAND, // &
        OPER_LOR,  // |
        OPER_LNOT, // ~
        OPER_LT,   // <
        OPER_GT,   // >
        OPER_LE,   // <=
        OPER_GE,   // >=
        OPER_EQ,   // ==
        OPER_NEQ,  // !=
        OPER_PTR,  // ptr
    };
};

#endif