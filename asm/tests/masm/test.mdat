;; This contains just the data
;; The syntax will be simple for the sake of simpler parsing
;; [TYPE] [NAME] [VALUE]

db a ;; giving no value results in a default value of 0
dw b 1
dd c 2
dq d 3

ds name "ABC" ;; defining a string obviously
ds greet "Hello, World!".10. ;; The '.' operator will act as a concatenator
            "I am here too!".0 ;; The numbers will be translated to the respective character

ds msg "

This is the message

;; This comment will also be included
".0

;; If no value is given for how many bytes to reserve, '1' will be taken as default
rb p 10 ;; reserve 10 bytes  
rw q 
rd r 3
rq s 5

;; dq a

;; To meet the VM's memory alignment requirements, if the number of bytes reserved are not aligned
;; the assembler will pad the memory

;; As much awesome as it sounds to have something like
;; dq abc (123 + (34*45 - _v) >> 23) & 255 
;; This will have to wait until basic things are implemented
;; The same applies to the following as well
;; mov mm1, !(123 << e)