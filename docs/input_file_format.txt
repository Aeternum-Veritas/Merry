The Input File's Structure and Format:

Merry expects a binary file from the user as it's input file. The path to the file can be provided which allows Merry to look for the file itself and read it.
The file's extension must be ".mbin". Other file extensions are not accepted and Merry throws an error if other file extensions was found. The user needs to make sure that the input file does exist
and is not a directory. 

Now, we will discuss the structure of the file or the structure that Merry expects in the file. 

The file's structure contains a header, the instructions, the data and strings. Lets keep header aside for now and talk about the other sections.

The input file has mainly 3 sections that represents the entire code in binary. The sections are:
1) The Instruction section: contains all the instructions that needs to be executed.

2) The Data section: contains all the data that the instructions manipulate.

3) The Strings section: contains all the characters or bytes that the program starts with. It is essentially just a part of the data section but Merry doesn't change the byte ordering of the data that resides here.

The header is a group of 32 bytes that contains metadata about the program which is essential in understanding the size of the sections mentioned above. The header also plays an important role in identifying that the file is indeed a program that can be run.

Structure of the header:

As mentioned, the header is 32 bytes in size and encodes the size of the instruction section, data section and the string section. The first 3 bytes of the input file but be MIN in binary or 0x4D 0x49 0x4E.
These 3 bytes tell Merry that this file contains an actual program that can be run.
The 5 bytes after that are reserved for future use.

The next 8 bytes encode the number of bytes that the instruction section covers which must be a multiple of 8. Let me repeat, this encodes the number of BYTES that the instruction section covers AND not the number of instructions.

The next 8 bytes are the same as above except it encodes the number of bytes that the data section covers. The last 8 bytes also do the same except it encodes the number of bytes that the string section covers.