depends _builtinalloc_.masm

proc std::mem::init_allocator
proc std::mem::alloc
proc std::mem::free
proc std::mem::break
proc std::mem::os_alloc
proc std::mem::pg_count

std::mem::init_allocator
    call __builtin_std_mem_init
    ret

std::mem::alloc
    call __builtin_std_alloc
    ret

std::mem::free
    call __builtin_std_free
    ret

;; The same as the sbrk system call in linux
;; Anyone wishing to build a custom memory allocator should use this to setup the internal metadata
;; Make sure that the builtin allocator is never invoked otherwise there will be problems
;; NOTE: Make sure to call std::init first
;; RETURNS: Ma = The start point, Mb = The end point 
std::mem::break
    loadq Ma, _Mstd_allocable_mem_start
    loadq Mb, _Mstd_allocable_mem_end
    ret    

;; Get the number of pages the program has that can be freely manipulated
;; RETURNS: Ma = number of pages
std::mem::pg_count
   loadq Ma, _Mstd_num_of_pages
   ret

;; This will ask the VM to allocate one more page
;; The creator of the custom allocator should be well aware that each page is 1024KB is size and each byte is addressable.
;; Calculate how many addresses that becomes
;; Make sure to call 'break' once again to receive the new end point and 'pg_count' to get new info
std::mem::os_alloc
   call __builtin_std_mem_request_more_mem
   ret