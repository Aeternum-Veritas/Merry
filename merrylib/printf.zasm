;; This modules makes an attempt at implementing the printf

;; printf(format, ...)
;; Take an example "Hello %s!"
;; As we print and encounter '%s' we will check the address in stack(Ma contains the address to format)
;; We will try to print from that address
;; Upon encountering a number, whatever is in the stack will be the number that will be printed.
;; The same logic as numbers for characters

.text:
proc printf

printf:
    pusha                     ;; Save the current state of all registers

;; Main print loop
__printf_print_loop:
    load Mb, Ma               ;; Load the current character from the format string
    cmp Mb, 10                ;; Check for NULL terminator
    je __printf_print_completed ;; If NULL terminator, end printing
    cmp Mb, '%'               ;; Check for format specifier
    jne __printf_print_char   ;; If not '%', print the character directly

;; Handle format specifier
    inc Ma                    ;; Move to the next character after '%'
    load Mb, Ma               ;; Load the format specifier character
    cmp Mb, '%'               ;; Check if it is '%%' (escaped percent sign)
    je __printf_print_percentage
    cmp Mb, 's'               ;; Check if it is '%s'
    je __printf_print_string  ;; Handle string specifier
    ;; Additional format specifiers can be added here
    jmp __printf_update       ;; If unrecognized specifier, just continue

;; Print a regular character
__printf_print_char:
    cout Mb                   ;; Print the character in Mb
    jmp __printf_update       ;; Move to the next character

;; Update to the next character in format string
__printf_update:
    inc Ma                    ;; Increment the format string pointer
    jmp __printf_print_loop   ;; Continue the print loop

;; Print completed
__printf_print_completed:
    popa                      ;; Restore the previous state of all registers
    ret

;; Print escaped percentage '%%'
__printf_print_percentage:
    mov Mb, 37                ;; ASCII code for '%'
    cout Mb                   ;; Print '%'
    jmp __printf_update       ;; Move to the next character

;; Print a string '%s'
__printf_print_string:
    sva Mb, 1                 ;; Get the address of the string argument
__printf_inner_printloop:
    load Mc, Mb               ;; Load the character from the string argument
    cmp Mc, 10                ;; Check for NULL terminator
    je __printf_update        ;; If NULL, end the string printing
    cout Mc                   ;; Print the character
    inc Mb                    ;; Move to the next character in the string
    jmp __printf_inner_printloop ;; Continue printing the string

;; If the format string ends with an incomplete format specifier like "Hello %", just print '%'.
;; Note: '%%' is handled correctly to print a single '%'.

;; I think I need to implement something like mov Regr, 'a'